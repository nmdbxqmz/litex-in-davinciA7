//--------------------------------------------------------------------------------
// Auto-generated by LiteX (10dcc7367) on 2024-11-30 20:31:30
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* BUTTONS Registers */
#define CSR_BUTTONS_BASE (CSR_BASE + 0x0L)
#define CSR_BUTTONS_IN_ADDR (CSR_BASE + 0x0L)
#define CSR_BUTTONS_IN_SIZE 1
#define CSR_BUTTONS_MODE_ADDR (CSR_BASE + 0x4L)
#define CSR_BUTTONS_MODE_SIZE 1
#define CSR_BUTTONS_EDGE_ADDR (CSR_BASE + 0x8L)
#define CSR_BUTTONS_EDGE_SIZE 1
#define CSR_BUTTONS_EV_STATUS_ADDR (CSR_BASE + 0xcL)
#define CSR_BUTTONS_EV_STATUS_SIZE 1
#define CSR_BUTTONS_EV_PENDING_ADDR (CSR_BASE + 0x10L)
#define CSR_BUTTONS_EV_PENDING_SIZE 1
#define CSR_BUTTONS_EV_ENABLE_ADDR (CSR_BASE + 0x14L)
#define CSR_BUTTONS_EV_ENABLE_SIZE 1

/* BUTTONS Fields */
#define CSR_BUTTONS_EV_STATUS_I0_OFFSET 0
#define CSR_BUTTONS_EV_STATUS_I0_SIZE 1
#define CSR_BUTTONS_EV_STATUS_I1_OFFSET 1
#define CSR_BUTTONS_EV_STATUS_I1_SIZE 1
#define CSR_BUTTONS_EV_STATUS_I2_OFFSET 2
#define CSR_BUTTONS_EV_STATUS_I2_SIZE 1
#define CSR_BUTTONS_EV_STATUS_I3_OFFSET 3
#define CSR_BUTTONS_EV_STATUS_I3_SIZE 1
#define CSR_BUTTONS_EV_PENDING_I0_OFFSET 0
#define CSR_BUTTONS_EV_PENDING_I0_SIZE 1
#define CSR_BUTTONS_EV_PENDING_I1_OFFSET 1
#define CSR_BUTTONS_EV_PENDING_I1_SIZE 1
#define CSR_BUTTONS_EV_PENDING_I2_OFFSET 2
#define CSR_BUTTONS_EV_PENDING_I2_SIZE 1
#define CSR_BUTTONS_EV_PENDING_I3_OFFSET 3
#define CSR_BUTTONS_EV_PENDING_I3_SIZE 1
#define CSR_BUTTONS_EV_ENABLE_I0_OFFSET 0
#define CSR_BUTTONS_EV_ENABLE_I0_SIZE 1
#define CSR_BUTTONS_EV_ENABLE_I1_OFFSET 1
#define CSR_BUTTONS_EV_ENABLE_I1_SIZE 1
#define CSR_BUTTONS_EV_ENABLE_I2_OFFSET 2
#define CSR_BUTTONS_EV_ENABLE_I2_SIZE 1
#define CSR_BUTTONS_EV_ENABLE_I3_OFFSET 3
#define CSR_BUTTONS_EV_ENABLE_I3_SIZE 1

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x804L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* DDRPHY Registers */
#define CSR_DDRPHY_BASE (CSR_BASE + 0x1000L)
#define CSR_DDRPHY_RST_ADDR (CSR_BASE + 0x1000L)
#define CSR_DDRPHY_RST_SIZE 1
#define CSR_DDRPHY_DLY_SEL_ADDR (CSR_BASE + 0x1004L)
#define CSR_DDRPHY_DLY_SEL_SIZE 1
#define CSR_DDRPHY_HALF_SYS8X_TAPS_ADDR (CSR_BASE + 0x1008L)
#define CSR_DDRPHY_HALF_SYS8X_TAPS_SIZE 1
#define CSR_DDRPHY_WLEVEL_EN_ADDR (CSR_BASE + 0x100cL)
#define CSR_DDRPHY_WLEVEL_EN_SIZE 1
#define CSR_DDRPHY_WLEVEL_STROBE_ADDR (CSR_BASE + 0x1010L)
#define CSR_DDRPHY_WLEVEL_STROBE_SIZE 1
#define CSR_DDRPHY_RDLY_DQ_RST_ADDR (CSR_BASE + 0x1014L)
#define CSR_DDRPHY_RDLY_DQ_RST_SIZE 1
#define CSR_DDRPHY_RDLY_DQ_INC_ADDR (CSR_BASE + 0x1018L)
#define CSR_DDRPHY_RDLY_DQ_INC_SIZE 1
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x101cL)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_SIZE 1
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x1020L)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_SIZE 1
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x1024L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_SIZE 1
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x1028L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_SIZE 1
#define CSR_DDRPHY_RDPHASE_ADDR (CSR_BASE + 0x102cL)
#define CSR_DDRPHY_RDPHASE_SIZE 1
#define CSR_DDRPHY_WRPHASE_ADDR (CSR_BASE + 0x1030L)
#define CSR_DDRPHY_WRPHASE_SIZE 1

/* DDRPHY Fields */

/* GPIO0 Registers */
#define CSR_GPIO0_BASE (CSR_BASE + 0x1800L)
#define CSR_GPIO0_OE_ADDR (CSR_BASE + 0x1800L)
#define CSR_GPIO0_OE_SIZE 1
#define CSR_GPIO0_IN_ADDR (CSR_BASE + 0x1804L)
#define CSR_GPIO0_IN_SIZE 1
#define CSR_GPIO0_OUT_ADDR (CSR_BASE + 0x1808L)
#define CSR_GPIO0_OUT_SIZE 1
#define CSR_GPIO0_MODE_ADDR (CSR_BASE + 0x180cL)
#define CSR_GPIO0_MODE_SIZE 1
#define CSR_GPIO0_EDGE_ADDR (CSR_BASE + 0x1810L)
#define CSR_GPIO0_EDGE_SIZE 1
#define CSR_GPIO0_EV_STATUS_ADDR (CSR_BASE + 0x1814L)
#define CSR_GPIO0_EV_STATUS_SIZE 1
#define CSR_GPIO0_EV_PENDING_ADDR (CSR_BASE + 0x1818L)
#define CSR_GPIO0_EV_PENDING_SIZE 1
#define CSR_GPIO0_EV_ENABLE_ADDR (CSR_BASE + 0x181cL)
#define CSR_GPIO0_EV_ENABLE_SIZE 1

/* GPIO0 Fields */
#define CSR_GPIO0_EV_STATUS_I0_OFFSET 0
#define CSR_GPIO0_EV_STATUS_I0_SIZE 1
#define CSR_GPIO0_EV_PENDING_I0_OFFSET 0
#define CSR_GPIO0_EV_PENDING_I0_SIZE 1
#define CSR_GPIO0_EV_ENABLE_I0_OFFSET 0
#define CSR_GPIO0_EV_ENABLE_I0_SIZE 1

/* GPIO1 Registers */
#define CSR_GPIO1_BASE (CSR_BASE + 0x2000L)
#define CSR_GPIO1_OE_ADDR (CSR_BASE + 0x2000L)
#define CSR_GPIO1_OE_SIZE 1
#define CSR_GPIO1_IN_ADDR (CSR_BASE + 0x2004L)
#define CSR_GPIO1_IN_SIZE 1
#define CSR_GPIO1_OUT_ADDR (CSR_BASE + 0x2008L)
#define CSR_GPIO1_OUT_SIZE 1
#define CSR_GPIO1_MODE_ADDR (CSR_BASE + 0x200cL)
#define CSR_GPIO1_MODE_SIZE 1
#define CSR_GPIO1_EDGE_ADDR (CSR_BASE + 0x2010L)
#define CSR_GPIO1_EDGE_SIZE 1
#define CSR_GPIO1_EV_STATUS_ADDR (CSR_BASE + 0x2014L)
#define CSR_GPIO1_EV_STATUS_SIZE 1
#define CSR_GPIO1_EV_PENDING_ADDR (CSR_BASE + 0x2018L)
#define CSR_GPIO1_EV_PENDING_SIZE 1
#define CSR_GPIO1_EV_ENABLE_ADDR (CSR_BASE + 0x201cL)
#define CSR_GPIO1_EV_ENABLE_SIZE 1

/* GPIO1 Fields */
#define CSR_GPIO1_EV_STATUS_I0_OFFSET 0
#define CSR_GPIO1_EV_STATUS_I0_SIZE 1
#define CSR_GPIO1_EV_PENDING_I0_OFFSET 0
#define CSR_GPIO1_EV_PENDING_I0_SIZE 1
#define CSR_GPIO1_EV_ENABLE_I0_OFFSET 0
#define CSR_GPIO1_EV_ENABLE_I0_SIZE 1

/* IDENTIFIER_MEM Registers */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x2800L)

/* IDENTIFIER_MEM Fields */

/* LEDS Registers */
#define CSR_LEDS_BASE (CSR_BASE + 0x3000L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x3000L)
#define CSR_LEDS_OUT_SIZE 1

/* LEDS Fields */

/* SDCARD_BLOCK2MEM Registers */
#define CSR_SDCARD_BLOCK2MEM_BASE (CSR_BASE + 0x3800L)
#define CSR_SDCARD_BLOCK2MEM_DMA_BASE_ADDR (CSR_BASE + 0x3800L)
#define CSR_SDCARD_BLOCK2MEM_DMA_BASE_SIZE 2
#define CSR_SDCARD_BLOCK2MEM_DMA_LENGTH_ADDR (CSR_BASE + 0x3808L)
#define CSR_SDCARD_BLOCK2MEM_DMA_LENGTH_SIZE 1
#define CSR_SDCARD_BLOCK2MEM_DMA_ENABLE_ADDR (CSR_BASE + 0x380cL)
#define CSR_SDCARD_BLOCK2MEM_DMA_ENABLE_SIZE 1
#define CSR_SDCARD_BLOCK2MEM_DMA_DONE_ADDR (CSR_BASE + 0x3810L)
#define CSR_SDCARD_BLOCK2MEM_DMA_DONE_SIZE 1
#define CSR_SDCARD_BLOCK2MEM_DMA_LOOP_ADDR (CSR_BASE + 0x3814L)
#define CSR_SDCARD_BLOCK2MEM_DMA_LOOP_SIZE 1
#define CSR_SDCARD_BLOCK2MEM_DMA_OFFSET_ADDR (CSR_BASE + 0x3818L)
#define CSR_SDCARD_BLOCK2MEM_DMA_OFFSET_SIZE 1

/* SDCARD_BLOCK2MEM Fields */

/* SDCARD_CORE Registers */
#define CSR_SDCARD_CORE_BASE (CSR_BASE + 0x4000L)
#define CSR_SDCARD_CORE_CMD_ARGUMENT_ADDR (CSR_BASE + 0x4000L)
#define CSR_SDCARD_CORE_CMD_ARGUMENT_SIZE 1
#define CSR_SDCARD_CORE_CMD_COMMAND_ADDR (CSR_BASE + 0x4004L)
#define CSR_SDCARD_CORE_CMD_COMMAND_SIZE 1
#define CSR_SDCARD_CORE_CMD_SEND_ADDR (CSR_BASE + 0x4008L)
#define CSR_SDCARD_CORE_CMD_SEND_SIZE 1
#define CSR_SDCARD_CORE_CMD_RESPONSE_ADDR (CSR_BASE + 0x400cL)
#define CSR_SDCARD_CORE_CMD_RESPONSE_SIZE 4
#define CSR_SDCARD_CORE_CMD_EVENT_ADDR (CSR_BASE + 0x401cL)
#define CSR_SDCARD_CORE_CMD_EVENT_SIZE 1
#define CSR_SDCARD_CORE_DATA_EVENT_ADDR (CSR_BASE + 0x4020L)
#define CSR_SDCARD_CORE_DATA_EVENT_SIZE 1
#define CSR_SDCARD_CORE_BLOCK_LENGTH_ADDR (CSR_BASE + 0x4024L)
#define CSR_SDCARD_CORE_BLOCK_LENGTH_SIZE 1
#define CSR_SDCARD_CORE_BLOCK_COUNT_ADDR (CSR_BASE + 0x4028L)
#define CSR_SDCARD_CORE_BLOCK_COUNT_SIZE 1

/* SDCARD_CORE Fields */
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_TYPE_OFFSET 0
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_TYPE_SIZE 2
#define CSR_SDCARD_CORE_CMD_COMMAND_DATA_TYPE_OFFSET 5
#define CSR_SDCARD_CORE_CMD_COMMAND_DATA_TYPE_SIZE 2
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_OFFSET 8
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_SIZE 6
#define CSR_SDCARD_CORE_CMD_EVENT_DONE_OFFSET 0
#define CSR_SDCARD_CORE_CMD_EVENT_DONE_SIZE 1
#define CSR_SDCARD_CORE_CMD_EVENT_ERROR_OFFSET 1
#define CSR_SDCARD_CORE_CMD_EVENT_ERROR_SIZE 1
#define CSR_SDCARD_CORE_CMD_EVENT_TIMEOUT_OFFSET 2
#define CSR_SDCARD_CORE_CMD_EVENT_TIMEOUT_SIZE 1
#define CSR_SDCARD_CORE_CMD_EVENT_CRC_OFFSET 3
#define CSR_SDCARD_CORE_CMD_EVENT_CRC_SIZE 1
#define CSR_SDCARD_CORE_DATA_EVENT_DONE_OFFSET 0
#define CSR_SDCARD_CORE_DATA_EVENT_DONE_SIZE 1
#define CSR_SDCARD_CORE_DATA_EVENT_ERROR_OFFSET 1
#define CSR_SDCARD_CORE_DATA_EVENT_ERROR_SIZE 1
#define CSR_SDCARD_CORE_DATA_EVENT_TIMEOUT_OFFSET 2
#define CSR_SDCARD_CORE_DATA_EVENT_TIMEOUT_SIZE 1
#define CSR_SDCARD_CORE_DATA_EVENT_CRC_OFFSET 3
#define CSR_SDCARD_CORE_DATA_EVENT_CRC_SIZE 1

/* SDCARD_IRQ Registers */
#define CSR_SDCARD_IRQ_BASE (CSR_BASE + 0x4800L)
#define CSR_SDCARD_IRQ_STATUS_ADDR (CSR_BASE + 0x4800L)
#define CSR_SDCARD_IRQ_STATUS_SIZE 1
#define CSR_SDCARD_IRQ_PENDING_ADDR (CSR_BASE + 0x4804L)
#define CSR_SDCARD_IRQ_PENDING_SIZE 1
#define CSR_SDCARD_IRQ_ENABLE_ADDR (CSR_BASE + 0x4808L)
#define CSR_SDCARD_IRQ_ENABLE_SIZE 1

/* SDCARD_IRQ Fields */
#define CSR_SDCARD_IRQ_STATUS_CARD_DETECT_OFFSET 0
#define CSR_SDCARD_IRQ_STATUS_CARD_DETECT_SIZE 1
#define CSR_SDCARD_IRQ_STATUS_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDCARD_IRQ_STATUS_BLOCK2MEM_DMA_SIZE 1
#define CSR_SDCARD_IRQ_STATUS_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDCARD_IRQ_STATUS_MEM2BLOCK_DMA_SIZE 1
#define CSR_SDCARD_IRQ_STATUS_CMD_DONE_OFFSET 3
#define CSR_SDCARD_IRQ_STATUS_CMD_DONE_SIZE 1
#define CSR_SDCARD_IRQ_PENDING_CARD_DETECT_OFFSET 0
#define CSR_SDCARD_IRQ_PENDING_CARD_DETECT_SIZE 1
#define CSR_SDCARD_IRQ_PENDING_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDCARD_IRQ_PENDING_BLOCK2MEM_DMA_SIZE 1
#define CSR_SDCARD_IRQ_PENDING_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDCARD_IRQ_PENDING_MEM2BLOCK_DMA_SIZE 1
#define CSR_SDCARD_IRQ_PENDING_CMD_DONE_OFFSET 3
#define CSR_SDCARD_IRQ_PENDING_CMD_DONE_SIZE 1
#define CSR_SDCARD_IRQ_ENABLE_CARD_DETECT_OFFSET 0
#define CSR_SDCARD_IRQ_ENABLE_CARD_DETECT_SIZE 1
#define CSR_SDCARD_IRQ_ENABLE_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDCARD_IRQ_ENABLE_BLOCK2MEM_DMA_SIZE 1
#define CSR_SDCARD_IRQ_ENABLE_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDCARD_IRQ_ENABLE_MEM2BLOCK_DMA_SIZE 1
#define CSR_SDCARD_IRQ_ENABLE_CMD_DONE_OFFSET 3
#define CSR_SDCARD_IRQ_ENABLE_CMD_DONE_SIZE 1

/* SDCARD_MEM2BLOCK Registers */
#define CSR_SDCARD_MEM2BLOCK_BASE (CSR_BASE + 0x5000L)
#define CSR_SDCARD_MEM2BLOCK_DMA_BASE_ADDR (CSR_BASE + 0x5000L)
#define CSR_SDCARD_MEM2BLOCK_DMA_BASE_SIZE 2
#define CSR_SDCARD_MEM2BLOCK_DMA_LENGTH_ADDR (CSR_BASE + 0x5008L)
#define CSR_SDCARD_MEM2BLOCK_DMA_LENGTH_SIZE 1
#define CSR_SDCARD_MEM2BLOCK_DMA_ENABLE_ADDR (CSR_BASE + 0x500cL)
#define CSR_SDCARD_MEM2BLOCK_DMA_ENABLE_SIZE 1
#define CSR_SDCARD_MEM2BLOCK_DMA_DONE_ADDR (CSR_BASE + 0x5010L)
#define CSR_SDCARD_MEM2BLOCK_DMA_DONE_SIZE 1
#define CSR_SDCARD_MEM2BLOCK_DMA_LOOP_ADDR (CSR_BASE + 0x5014L)
#define CSR_SDCARD_MEM2BLOCK_DMA_LOOP_SIZE 1
#define CSR_SDCARD_MEM2BLOCK_DMA_OFFSET_ADDR (CSR_BASE + 0x5018L)
#define CSR_SDCARD_MEM2BLOCK_DMA_OFFSET_SIZE 1

/* SDCARD_MEM2BLOCK Fields */

/* SDCARD_PHY Registers */
#define CSR_SDCARD_PHY_BASE (CSR_BASE + 0x5800L)
#define CSR_SDCARD_PHY_CARD_DETECT_ADDR (CSR_BASE + 0x5800L)
#define CSR_SDCARD_PHY_CARD_DETECT_SIZE 1
#define CSR_SDCARD_PHY_CLOCKER_DIVIDER_ADDR (CSR_BASE + 0x5804L)
#define CSR_SDCARD_PHY_CLOCKER_DIVIDER_SIZE 1
#define CSR_SDCARD_PHY_INIT_INITIALIZE_ADDR (CSR_BASE + 0x5808L)
#define CSR_SDCARD_PHY_INIT_INITIALIZE_SIZE 1
#define CSR_SDCARD_PHY_DATAW_STATUS_ADDR (CSR_BASE + 0x580cL)
#define CSR_SDCARD_PHY_DATAW_STATUS_SIZE 1

/* SDCARD_PHY Fields */
#define CSR_SDCARD_PHY_DATAW_STATUS_ACCEPTED_OFFSET 0
#define CSR_SDCARD_PHY_DATAW_STATUS_ACCEPTED_SIZE 1
#define CSR_SDCARD_PHY_DATAW_STATUS_CRC_ERROR_OFFSET 1
#define CSR_SDCARD_PHY_DATAW_STATUS_CRC_ERROR_SIZE 1
#define CSR_SDCARD_PHY_DATAW_STATUS_WRITE_ERROR_OFFSET 2
#define CSR_SDCARD_PHY_DATAW_STATUS_WRITE_ERROR_SIZE 1

/* SDRAM Registers */
#define CSR_SDRAM_BASE (CSR_BASE + 0x6000L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x6000L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x6004L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x6008L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x600cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x6010L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x6014L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x6018L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x601cL)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x6020L)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x6024L)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x6028L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x602cL)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 1
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x6030L)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR (CSR_BASE + 0x6034L)
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR (CSR_BASE + 0x6038L)
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR (CSR_BASE + 0x603cL)
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR (CSR_BASE + 0x6040L)
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR (CSR_BASE + 0x6044L)
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 1
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR (CSR_BASE + 0x6048L)
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR (CSR_BASE + 0x604cL)
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR (CSR_BASE + 0x6050L)
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR (CSR_BASE + 0x6054L)
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR (CSR_BASE + 0x6058L)
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR (CSR_BASE + 0x605cL)
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 1
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR (CSR_BASE + 0x6060L)
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 1

/* SDRAM Fields */
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_TOP_SIZE 1
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_BOTTOM_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_TOP_SIZE 1
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_BOTTOM_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_TOP_SIZE 1
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_BOTTOM_SIZE 1

/* TIMER0 Registers */
#define CSR_TIMER0_BASE (CSR_BASE + 0x6800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x6800L)
#define CSR_TIMER0_LOAD_SIZE 1
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x6804L)
#define CSR_TIMER0_RELOAD_SIZE 1
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x6808L)
#define CSR_TIMER0_EN_SIZE 1
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x680cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x6810L)
#define CSR_TIMER0_VALUE_SIZE 1
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x6814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x6818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x681cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1

/* TIMER0 Fields */
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1

/* UART Registers */
#define CSR_UART_BASE (CSR_BASE + 0x7000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x7000L)
#define CSR_UART_RXTX_SIZE 1
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x7004L)
#define CSR_UART_TXFULL_SIZE 1
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x7008L)
#define CSR_UART_RXEMPTY_SIZE 1
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x700cL)
#define CSR_UART_EV_STATUS_SIZE 1
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x7010L)
#define CSR_UART_EV_PENDING_SIZE 1
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x7014L)
#define CSR_UART_EV_ENABLE_SIZE 1
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x7018L)
#define CSR_UART_TXEMPTY_SIZE 1
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x701cL)
#define CSR_UART_RXFULL_SIZE 1

/* UART Fields */
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1

/* VIDEO_FRAMEBUFFER Registers */
#define CSR_VIDEO_FRAMEBUFFER_BASE (CSR_BASE + 0x7800L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_BASE_ADDR (CSR_BASE + 0x7800L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_BASE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_LENGTH_ADDR (CSR_BASE + 0x7804L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_LENGTH_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_ENABLE_ADDR (CSR_BASE + 0x7808L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_ENABLE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_DONE_ADDR (CSR_BASE + 0x780cL)
#define CSR_VIDEO_FRAMEBUFFER_DMA_DONE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_LOOP_ADDR (CSR_BASE + 0x7810L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_LOOP_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_DMA_OFFSET_ADDR (CSR_BASE + 0x7814L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_OFFSET_SIZE 1

/* VIDEO_FRAMEBUFFER Fields */

/* VIDEO_FRAMEBUFFER_VTG Registers */
#define CSR_VIDEO_FRAMEBUFFER_VTG_BASE (CSR_BASE + 0x8000L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_ENABLE_ADDR (CSR_BASE + 0x8000L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_ENABLE_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HRES_ADDR (CSR_BASE + 0x8004L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HRES_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_START_ADDR (CSR_BASE + 0x8008L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_START_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_END_ADDR (CSR_BASE + 0x800cL)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_END_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSCAN_ADDR (CSR_BASE + 0x8010L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSCAN_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VRES_ADDR (CSR_BASE + 0x8014L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VRES_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_START_ADDR (CSR_BASE + 0x8018L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_START_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_END_ADDR (CSR_BASE + 0x801cL)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_END_SIZE 1
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSCAN_ADDR (CSR_BASE + 0x8020L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSCAN_SIZE 1

/* VIDEO_FRAMEBUFFER_VTG Fields */

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* BUTTONS Access Functions */
static inline uint32_t buttons_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline uint32_t buttons_mode_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void buttons_mode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
static inline uint32_t buttons_edge_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
static inline void buttons_edge_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8L));
}
static inline uint32_t buttons_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}
static inline uint32_t buttons_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x10L));
}
static inline void buttons_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10L));
}
static inline uint32_t buttons_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x14L));
}
static inline void buttons_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x14L));
}

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}

/* DDRPHY Access Functions */
static inline uint32_t ddrphy_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void ddrphy_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}
static inline uint32_t ddrphy_dly_sel_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
static inline void ddrphy_dly_sel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1004L));
}
static inline uint32_t ddrphy_half_sys8x_taps_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
static inline void ddrphy_half_sys8x_taps_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1008L));
}
static inline uint32_t ddrphy_wlevel_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x100cL));
}
static inline void ddrphy_wlevel_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x100cL));
}
static inline uint32_t ddrphy_wlevel_strobe_read(void) {
	return csr_read_simple((CSR_BASE + 0x1010L));
}
static inline void ddrphy_wlevel_strobe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1010L));
}
static inline uint32_t ddrphy_rdly_dq_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x1014L));
}
static inline void ddrphy_rdly_dq_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1014L));
}
static inline uint32_t ddrphy_rdly_dq_inc_read(void) {
	return csr_read_simple((CSR_BASE + 0x1018L));
}
static inline void ddrphy_rdly_dq_inc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1018L));
}
static inline uint32_t ddrphy_rdly_dq_bitslip_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x101cL));
}
static inline void ddrphy_rdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x101cL));
}
static inline uint32_t ddrphy_rdly_dq_bitslip_read(void) {
	return csr_read_simple((CSR_BASE + 0x1020L));
}
static inline void ddrphy_rdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1020L));
}
static inline uint32_t ddrphy_wdly_dq_bitslip_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x1024L));
}
static inline void ddrphy_wdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1024L));
}
static inline uint32_t ddrphy_wdly_dq_bitslip_read(void) {
	return csr_read_simple((CSR_BASE + 0x1028L));
}
static inline void ddrphy_wdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1028L));
}
static inline uint32_t ddrphy_rdphase_read(void) {
	return csr_read_simple((CSR_BASE + 0x102cL));
}
static inline void ddrphy_rdphase_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x102cL));
}
static inline uint32_t ddrphy_wrphase_read(void) {
	return csr_read_simple((CSR_BASE + 0x1030L));
}
static inline void ddrphy_wrphase_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1030L));
}

/* GPIO0 Access Functions */
static inline uint32_t gpio0_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void gpio0_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}
static inline uint32_t gpio0_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x1804L));
}
static inline uint32_t gpio0_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1808L));
}
static inline void gpio0_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1808L));
}
static inline uint32_t gpio0_mode_read(void) {
	return csr_read_simple((CSR_BASE + 0x180cL));
}
static inline void gpio0_mode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x180cL));
}
static inline uint32_t gpio0_edge_read(void) {
	return csr_read_simple((CSR_BASE + 0x1810L));
}
static inline void gpio0_edge_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1810L));
}
static inline uint32_t gpio0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x1814L));
}
static inline uint32_t gpio0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x1818L));
}
static inline void gpio0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1818L));
}
static inline uint32_t gpio0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x181cL));
}
static inline void gpio0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x181cL));
}

/* GPIO1 Access Functions */
static inline uint32_t gpio1_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void gpio1_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}
static inline uint32_t gpio1_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x2004L));
}
static inline uint32_t gpio1_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void gpio1_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}
static inline uint32_t gpio1_mode_read(void) {
	return csr_read_simple((CSR_BASE + 0x200cL));
}
static inline void gpio1_mode_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x200cL));
}
static inline uint32_t gpio1_edge_read(void) {
	return csr_read_simple((CSR_BASE + 0x2010L));
}
static inline void gpio1_edge_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2010L));
}
static inline uint32_t gpio1_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x2014L));
}
static inline uint32_t gpio1_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x2018L));
}
static inline void gpio1_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2018L));
}
static inline uint32_t gpio1_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x201cL));
}
static inline void gpio1_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x201cL));
}

/* IDENTIFIER_MEM Access Functions */

/* LEDS Access Functions */
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}

/* SDCARD_BLOCK2MEM Access Functions */
static inline uint64_t sdcard_block2mem_dma_base_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x3800L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x3804L));
	return r;
}
static inline void sdcard_block2mem_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x3800L));
	csr_write_simple(v, (CSR_BASE + 0x3804L));
}
static inline uint32_t sdcard_block2mem_dma_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x3808L));
}
static inline void sdcard_block2mem_dma_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3808L));
}
static inline uint32_t sdcard_block2mem_dma_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x380cL));
}
static inline void sdcard_block2mem_dma_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x380cL));
}
static inline uint32_t sdcard_block2mem_dma_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x3810L));
}
static inline uint32_t sdcard_block2mem_dma_loop_read(void) {
	return csr_read_simple((CSR_BASE + 0x3814L));
}
static inline void sdcard_block2mem_dma_loop_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3814L));
}
static inline uint32_t sdcard_block2mem_dma_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x3818L));
}

/* SDCARD_CORE Access Functions */
static inline uint32_t sdcard_core_cmd_argument_read(void) {
	return csr_read_simple((CSR_BASE + 0x4000L));
}
static inline void sdcard_core_cmd_argument_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4000L));
}
static inline uint32_t sdcard_core_cmd_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x4004L));
}
static inline void sdcard_core_cmd_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4004L));
}
static inline uint32_t sdcard_core_cmd_send_read(void) {
	return csr_read_simple((CSR_BASE + 0x4008L));
}
static inline void sdcard_core_cmd_send_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4008L));
}
static inline uint32_t sdcard_core_cmd_event_read(void) {
	return csr_read_simple((CSR_BASE + 0x401cL));
}
static inline uint32_t sdcard_core_data_event_read(void) {
	return csr_read_simple((CSR_BASE + 0x4020L));
}
static inline uint32_t sdcard_core_block_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x4024L));
}
static inline void sdcard_core_block_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4024L));
}
static inline uint32_t sdcard_core_block_count_read(void) {
	return csr_read_simple((CSR_BASE + 0x4028L));
}
static inline void sdcard_core_block_count_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4028L));
}

/* SDCARD_IRQ Access Functions */
static inline uint32_t sdcard_irq_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x4800L));
}
static inline uint32_t sdcard_irq_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x4804L));
}
static inline void sdcard_irq_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4804L));
}
static inline uint32_t sdcard_irq_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x4808L));
}
static inline void sdcard_irq_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4808L));
}

/* SDCARD_MEM2BLOCK Access Functions */
static inline uint64_t sdcard_mem2block_dma_base_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x5000L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x5004L));
	return r;
}
static inline void sdcard_mem2block_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x5000L));
	csr_write_simple(v, (CSR_BASE + 0x5004L));
}
static inline uint32_t sdcard_mem2block_dma_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x5008L));
}
static inline void sdcard_mem2block_dma_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5008L));
}
static inline uint32_t sdcard_mem2block_dma_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x500cL));
}
static inline void sdcard_mem2block_dma_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x500cL));
}
static inline uint32_t sdcard_mem2block_dma_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x5010L));
}
static inline uint32_t sdcard_mem2block_dma_loop_read(void) {
	return csr_read_simple((CSR_BASE + 0x5014L));
}
static inline void sdcard_mem2block_dma_loop_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5014L));
}
static inline uint32_t sdcard_mem2block_dma_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x5018L));
}

/* SDCARD_PHY Access Functions */
static inline uint32_t sdcard_phy_card_detect_read(void) {
	return csr_read_simple((CSR_BASE + 0x5800L));
}
static inline uint32_t sdcard_phy_clocker_divider_read(void) {
	return csr_read_simple((CSR_BASE + 0x5804L));
}
static inline void sdcard_phy_clocker_divider_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5804L));
}
static inline uint32_t sdcard_phy_init_initialize_read(void) {
	return csr_read_simple((CSR_BASE + 0x5808L));
}
static inline void sdcard_phy_init_initialize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5808L));
}
static inline uint32_t sdcard_phy_dataw_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x580cL));
}

/* SDRAM Access Functions */
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x6000L));
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6000L));
}
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x6004L));
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6004L));
}
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x6008L));
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6008L));
}
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x600cL));
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x600cL));
}
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x6010L));
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6010L));
}
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x6014L));
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6014L));
}
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x6018L));
}
static inline uint32_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x601cL));
}
static inline void sdram_dfii_pi1_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x601cL));
}
static inline uint32_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x6020L));
}
static inline void sdram_dfii_pi1_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6020L));
}
static inline uint32_t sdram_dfii_pi1_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x6024L));
}
static inline void sdram_dfii_pi1_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6024L));
}
static inline uint32_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x6028L));
}
static inline void sdram_dfii_pi1_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6028L));
}
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x602cL));
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x602cL));
}
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x6030L));
}
static inline uint32_t sdram_dfii_pi2_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x6034L));
}
static inline void sdram_dfii_pi2_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6034L));
}
static inline uint32_t sdram_dfii_pi2_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x6038L));
}
static inline void sdram_dfii_pi2_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6038L));
}
static inline uint32_t sdram_dfii_pi2_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x603cL));
}
static inline void sdram_dfii_pi2_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x603cL));
}
static inline uint32_t sdram_dfii_pi2_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x6040L));
}
static inline void sdram_dfii_pi2_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6040L));
}
static inline uint32_t sdram_dfii_pi2_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x6044L));
}
static inline void sdram_dfii_pi2_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6044L));
}
static inline uint32_t sdram_dfii_pi2_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x6048L));
}
static inline uint32_t sdram_dfii_pi3_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x604cL));
}
static inline void sdram_dfii_pi3_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x604cL));
}
static inline uint32_t sdram_dfii_pi3_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x6050L));
}
static inline void sdram_dfii_pi3_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6050L));
}
static inline uint32_t sdram_dfii_pi3_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x6054L));
}
static inline void sdram_dfii_pi3_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6054L));
}
static inline uint32_t sdram_dfii_pi3_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x6058L));
}
static inline void sdram_dfii_pi3_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6058L));
}
static inline uint32_t sdram_dfii_pi3_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x605cL));
}
static inline void sdram_dfii_pi3_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x605cL));
}
static inline uint32_t sdram_dfii_pi3_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x6060L));
}

/* TIMER0 Access Functions */
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x6800L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6800L));
}
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x6804L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6804L));
}
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x6808L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6808L));
}
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x680cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x680cL));
}
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x6810L));
}
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x6814L));
}
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x6818L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6818L));
}
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x681cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x681cL));
}

/* UART Access Functions */
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x7000L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7000L));
}
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x7004L));
}
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x7008L));
}
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x700cL));
}
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x7010L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7010L));
}
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x7014L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7014L));
}
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x7018L));
}
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x701cL));
}

/* VIDEO_FRAMEBUFFER Access Functions */
static inline uint32_t video_framebuffer_dma_base_read(void) {
	return csr_read_simple((CSR_BASE + 0x7800L));
}
static inline void video_framebuffer_dma_base_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7800L));
}
static inline uint32_t video_framebuffer_dma_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x7804L));
}
static inline void video_framebuffer_dma_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7804L));
}
static inline uint32_t video_framebuffer_dma_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x7808L));
}
static inline void video_framebuffer_dma_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7808L));
}
static inline uint32_t video_framebuffer_dma_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x780cL));
}
static inline uint32_t video_framebuffer_dma_loop_read(void) {
	return csr_read_simple((CSR_BASE + 0x7810L));
}
static inline void video_framebuffer_dma_loop_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7810L));
}
static inline uint32_t video_framebuffer_dma_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x7814L));
}

/* VIDEO_FRAMEBUFFER_VTG Access Functions */
static inline uint32_t video_framebuffer_vtg_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x8000L));
}
static inline void video_framebuffer_vtg_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8000L));
}
static inline uint32_t video_framebuffer_vtg_hres_read(void) {
	return csr_read_simple((CSR_BASE + 0x8004L));
}
static inline void video_framebuffer_vtg_hres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8004L));
}
static inline uint32_t video_framebuffer_vtg_hsync_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x8008L));
}
static inline void video_framebuffer_vtg_hsync_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8008L));
}
static inline uint32_t video_framebuffer_vtg_hsync_end_read(void) {
	return csr_read_simple((CSR_BASE + 0x800cL));
}
static inline void video_framebuffer_vtg_hsync_end_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800cL));
}
static inline uint32_t video_framebuffer_vtg_hscan_read(void) {
	return csr_read_simple((CSR_BASE + 0x8010L));
}
static inline void video_framebuffer_vtg_hscan_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8010L));
}
static inline uint32_t video_framebuffer_vtg_vres_read(void) {
	return csr_read_simple((CSR_BASE + 0x8014L));
}
static inline void video_framebuffer_vtg_vres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8014L));
}
static inline uint32_t video_framebuffer_vtg_vsync_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x8018L));
}
static inline void video_framebuffer_vtg_vsync_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8018L));
}
static inline uint32_t video_framebuffer_vtg_vsync_end_read(void) {
	return csr_read_simple((CSR_BASE + 0x801cL));
}
static inline void video_framebuffer_vtg_vsync_end_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x801cL));
}
static inline uint32_t video_framebuffer_vtg_vscan_read(void) {
	return csr_read_simple((CSR_BASE + 0x8020L));
}
static inline void video_framebuffer_vtg_vscan_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8020L));
}
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
